[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;


void vertex() {
	mat4 mat_world = mat4(
		normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),
		normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[0]),
		normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[2]),
		WORLD_MATRIX[3]
	);
	mat_world = mat_world * mat4(
		vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), 
		vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),
		vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0)
	);
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
}


vec3 neon(float val, vec3 color) {
	float ramp = clamp(val, 0.0, 1.0);
	vec3 outp = vec3(0.0);
	ramp = ramp * ramp;
	outp += pow(color, vec3(4.0)) * ramp;
	ramp = ramp * ramp;
	outp += color * ramp;
	ramp = ramp * ramp;
	outp += vec3(1.0) * ramp;
	return outp;
}


void fragment() {
	vec2 base_uv = UV;
	float radius = length((base_uv - 0.5) * 2.0);
	
	float center = clamp(1.0 - radius, 0.0, 1.0);
	ALBEDO = neon(center, albedo.rgb);
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.886275, 0.745098, 0.196078, 1 )
